{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/jacksonmurphey/Desktop/NEXTJS/nextjs-meetupApp/pages/[meetupId]/index.js\";\n//domain-name.com/[unique meetup id]\n//This will be our detail page. \nimport { MongoClient } from 'mongodb';\nimport MeetupDetails from '../../components/meetups/MeetupDetails';\n\nconst MeetupDetailsPage = props => {\n  var _props$meetupData;\n\n  return /*#__PURE__*/_jsxDEV(MeetupDetails, {\n    image: (_props$meetupData = props.meetupData) === null || _props$meetupData === void 0 ? void 0 : _props$meetupData.image,\n    title: props.meetupData.title,\n    address: props.meetupData.address,\n    description: props.meetupData.description\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 9\n  }, this);\n}; //this must be used when pregenerating dynamic pages, when using getstaticProps()\n\n\nexport const getStaticPaths = async () => {\n  const client = await MongoClient.connect('mongodb+srv://admin:rn_h_q8A_ELhx3c@cluster0.5vozs.mongodb.net/meetupsDB?retryWrites=true&w=majority');\n  const db = client.db();\n  const meetupsCollection = db.collection('meetups');\n  const meetups = await meetupsCollection.find({}, {\n    _id: 1\n  }).toArray();\n  client.close();\n  return {\n    fallback: false,\n    //false means our all our meetupId values are supported and addressed below. If this false, and you dont address all values, you will get a 404 page for unlisted ones.\n    paths: meetups.map(meetup => ({\n      params: {\n        meetupId: meetup._id.toString()\n      }\n    })) //below is how we hard coded in our data.\n    // [\n    //     {\n    //         params: {\n    //             meetupId: 'm1',\n    //         },\n    //     },\n    //     {\n    //         params: {\n    //             meetupId: 'm2'\n    //         },\n    //     }\n    // ],\n\n  };\n};\nexport const getStaticProps = async context => {\n  const meetupId = context.params.meetupId; //params.meetupId is from the folder name [meetupId]\n  //fetch data for single meetup here.\n\n  const client = await MongoClient.connect('mongodb+srv://admin:rn_h_q8A_ELhx3c@cluster0.5vozs.mongodb.net/meetupsDB?retryWrites=true&w=majority');\n  const db = client.db();\n  const meetupsCollection = db.collection('meetups');\n  const selectedMeetup = await meetupsCollection.findOne({\n    _id: meetupId\n  });\n  client.close();\n  return {\n    props: {\n      meetupData: selectedMeetup\n    }\n  };\n};\nexport default MeetupDetailsPage;","map":{"version":3,"sources":["/Users/jacksonmurphey/Desktop/NEXTJS/nextjs-meetupApp/pages/[meetupId]/index.js"],"names":["MongoClient","MeetupDetails","MeetupDetailsPage","props","meetupData","image","title","address","description","getStaticPaths","client","connect","db","meetupsCollection","collection","meetups","find","_id","toArray","close","fallback","paths","map","meetup","params","meetupId","toString","getStaticProps","context","selectedMeetup","findOne"],"mappings":";;AAAA;AACA;AAEA,SAASA,WAAT,QAA4B,SAA5B;AACA,OAAOC,aAAP,MAA0B,wCAA1B;;AAEA,MAAMC,iBAAiB,GAAIC,KAAD,IAAW;AAAA;;AAGjC,sBACI,QAAC,aAAD;AACI,IAAA,KAAK,uBAAEA,KAAK,CAACC,UAAR,sDAAE,kBAAkBC,KAD7B;AAEI,IAAA,KAAK,EAAEF,KAAK,CAACC,UAAN,CAAiBE,KAF5B;AAGI,IAAA,OAAO,EAAEH,KAAK,CAACC,UAAN,CAAiBG,OAH9B;AAII,IAAA,WAAW,EAAEJ,KAAK,CAACC,UAAN,CAAiBI;AAJlC;AAAA;AAAA;AAAA;AAAA,UADJ;AASH,CAZD,C,CAiBA;;;AACA,OAAO,MAAMC,cAAc,GAAG,YAAY;AAEtC,QAAMC,MAAM,GAAG,MAAMV,WAAW,CAACW,OAAZ,CAAoB,sGAApB,CAArB;AACA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AACA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AACA,QAAMC,OAAO,GAAG,MAAMF,iBAAiB,CAACG,IAAlB,CAAuB,EAAvB,EAA2B;AAAEC,IAAAA,GAAG,EAAE;AAAP,GAA3B,EAAuCC,OAAvC,EAAtB;AACAR,EAAAA,MAAM,CAACS,KAAP;AAGA,SAAO;AACHC,IAAAA,QAAQ,EAAE,KADP;AACc;AACjBC,IAAAA,KAAK,EAAEN,OAAO,CAACO,GAAR,CAAYC,MAAM,KAAK;AAC1BC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,QAAQ,EAAEF,MAAM,CAACN,GAAP,CAAWS,QAAX;AAAZ;AADkB,KAAL,CAAlB,CAFJ,CAMH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAlBG,GAAP;AAoBH,CA7BM;AAgCP,OAAO,MAAMC,cAAc,GAAG,MAAOC,OAAP,IAAmB;AAG7C,QAAMH,QAAQ,GAAGG,OAAO,CAACJ,MAAR,CAAeC,QAAhC,CAH6C,CAGJ;AACzC;;AACA,QAAMf,MAAM,GAAG,MAAMV,WAAW,CAACW,OAAZ,CAAoB,sGAApB,CAArB;AACA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AACA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AACA,QAAMe,cAAc,GAAG,MAAMhB,iBAAiB,CAACiB,OAAlB,CAA0B;AAAEb,IAAAA,GAAG,EAAEQ;AAAP,GAA1B,CAA7B;AACAf,EAAAA,MAAM,CAACS,KAAP;AAGA,SAAO;AACHhB,IAAAA,KAAK,EAAE;AACHC,MAAAA,UAAU,EAAEyB;AADT;AADJ,GAAP;AAKH,CAjBM;AAmBP,eAAe3B,iBAAf","sourcesContent":["//domain-name.com/[unique meetup id]\n//This will be our detail page. \n\nimport { MongoClient } from 'mongodb'\nimport MeetupDetails from '../../components/meetups/MeetupDetails'\n\nconst MeetupDetailsPage = (props) => {\n\n\n    return (\n        <MeetupDetails\n            image={props.meetupData?.image}\n            title={props.meetupData.title}\n            address={props.meetupData.address}\n            description={props.meetupData.description}\n        />\n\n    )\n}\n\n\n\n\n//this must be used when pregenerating dynamic pages, when using getstaticProps()\nexport const getStaticPaths = async () => {\n\n    const client = await MongoClient.connect('mongodb+srv://admin:rn_h_q8A_ELhx3c@cluster0.5vozs.mongodb.net/meetupsDB?retryWrites=true&w=majority')\n    const db = client.db()\n    const meetupsCollection = db.collection('meetups')\n    const meetups = await meetupsCollection.find({}, { _id: 1 }).toArray()\n    client.close()\n\n\n    return {\n        fallback: false, //false means our all our meetupId values are supported and addressed below. If this false, and you dont address all values, you will get a 404 page for unlisted ones.\n        paths: meetups.map(meetup => ({\n            params: { meetupId: meetup._id.toString() }\n        }))\n\n        //below is how we hard coded in our data.\n        // [\n        //     {\n        //         params: {\n        //             meetupId: 'm1',\n        //         },\n        //     },\n        //     {\n        //         params: {\n        //             meetupId: 'm2'\n        //         },\n        //     }\n        // ],\n    }\n}\n\n\nexport const getStaticProps = async (context) => {\n\n\n    const meetupId = context.params.meetupId //params.meetupId is from the folder name [meetupId]\n    //fetch data for single meetup here.\n    const client = await MongoClient.connect('mongodb+srv://admin:rn_h_q8A_ELhx3c@cluster0.5vozs.mongodb.net/meetupsDB?retryWrites=true&w=majority')\n    const db = client.db()\n    const meetupsCollection = db.collection('meetups')\n    const selectedMeetup = await meetupsCollection.findOne({ _id: meetupId })\n    client.close()\n\n\n    return {\n        props: {\n            meetupData: selectedMeetup\n        }\n    }\n}\n\nexport default MeetupDetailsPage"]},"metadata":{},"sourceType":"module"}