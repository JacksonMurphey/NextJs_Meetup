{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/jacksonmurphey/Desktop/NEXTJS/nextjs-meetupApp/pages/index.js\",\n    _this = this;\n\n//domain-name.com/ \n//This is our root route. \n// import Layout from '../components/layout/Layout' //NOTE: Moved this to _app.js to wrap our whole componet. \nimport MeetupList from '../components/meetups/MeetupList';\n\n// import { useEffect, useState } from 'react'\nvar HomePage = function HomePage(props) {\n  //Since we are running the 'getStaticProps()' function below, we no longer need to manage state, or use useEffect()\n  // const [loadedMeetups, setLoadedMeetups] = useState([])\n  // useEffect(() => {\n  //     //fetch request\n  //     setLoadedMeetups(DUMMYDATA)\n  // }, [])\n  return /*#__PURE__*/_jsxDEV(MeetupList, {\n    meetups: props.meetups\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 9\n  }, _this);\n}; //static generation   alternatively :(SSG)-static site generation\n//below function only works in our pages. This allows you to load data before rendering \n//this code will never run on our clients side.\n\n\n_c = HomePage;\n//alternative solution for getStaticProps()\n//This solution always runs on the server side on deployment\n//Only use this is you need access to request/response data. or if your data changes very frequently\n// export const getServerSideProps = async (context) => {\n//     const req = context.req\n//     const res = context.res\n//     //fetch data from API here.\n//     return {\n//         props: {\n//             meetups: DUMMYDATA\n//         }\n//     }\n// }\n//if you dont have data that changes frequently, then getStaticProps is more efficient.\nexport var __N_SSG = true;\nexport default HomePage;\n\nvar _c;\n\n$RefreshReg$(_c, \"HomePage\");","map":{"version":3,"sources":["/Users/jacksonmurphey/Desktop/NEXTJS/nextjs-meetupApp/pages/index.js"],"names":["MeetupList","HomePage","props","meetups"],"mappings":";;;;;AAAA;AACA;AAGA;AACA,OAAOA,UAAP,MAAuB,kCAAvB;;AAEA;AAGA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,KAAD,EAAW;AACxB;AACA;AACA;AACA;AACA;AACA;AAGA,sBACI,QAAC,UAAD;AAAY,IAAA,OAAO,EAAEA,KAAK,CAACC;AAA3B;AAAA;AAAA;AAAA;AAAA,WADJ;AAGH,CAZD,C,CAcA;AACA;AACA;;;KAhBMF,Q;AA0CN;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,eAAeA,QAAf","sourcesContent":["//domain-name.com/ \n//This is our root route. \n\n\n// import Layout from '../components/layout/Layout' //NOTE: Moved this to _app.js to wrap our whole componet. \nimport MeetupList from '../components/meetups/MeetupList'\nimport { MongoClient } from 'mongodb'\n// import { useEffect, useState } from 'react'\n\n\nconst HomePage = (props) => {\n    //Since we are running the 'getStaticProps()' function below, we no longer need to manage state, or use useEffect()\n    // const [loadedMeetups, setLoadedMeetups] = useState([])\n    // useEffect(() => {\n    //     //fetch request\n    //     setLoadedMeetups(DUMMYDATA)\n    // }, [])\n\n\n    return (\n        <MeetupList meetups={props.meetups} />\n    )\n}\n\n//static generation   alternatively :(SSG)-static site generation\n//below function only works in our pages. This allows you to load data before rendering \n//this code will never run on our clients side.\nexport const getStaticProps = async () => {\n    //fetch data from API here\n    const client = await MongoClient.connect('mongodb+srv://admin:rn_h_q8A_ELhx3c@cluster0.5vozs.mongodb.net/meetupsDB?retryWrites=true&w=majority')\n    const db = client.db()\n    const meetupsCollection = db.collection('meetups')\n\n    const meetups = await meetupsCollection.find().toArray()\n\n    client.close()\n\n    //you must always return an obj. \n    return {\n        props: {\n            meetups: meetups.map(meetup => ({\n                title: meetup.title,\n                address: meetup.address,\n                image: meetup.image,\n                id: meetup._id.toString()\n            }))\n        },\n        revalidate: 10 //# of seconds NEXTJS will wait till it regenerates this page. This ensures your data is never older than 10seconds, you can set to any time-frame\n    }\n}\n\n\n//alternative solution for getStaticProps()\n//This solution always runs on the server side on deployment\n//Only use this is you need access to request/response data. or if your data changes very frequently\n// export const getServerSideProps = async (context) => {\n//     const req = context.req\n//     const res = context.res\n\n//     //fetch data from API here.\n\n//     return {\n//         props: {\n//             meetups: DUMMYDATA\n//         }\n//     }\n// }\n\n//if you dont have data that changes frequently, then getStaticProps is more efficient.\n\nexport default HomePage"]},"metadata":{},"sourceType":"module"}