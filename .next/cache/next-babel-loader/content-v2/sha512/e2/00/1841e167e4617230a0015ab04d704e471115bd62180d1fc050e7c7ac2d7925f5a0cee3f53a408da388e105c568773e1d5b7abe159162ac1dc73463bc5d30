{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/jacksonmurphey/Desktop/NEXTJS/nextjs-meetupApp/pages/[meetupId]/index.js\",\n    _this = this;\n\n//domain-name.com/[unique meetup id]\n//This will be our detail page. \nimport Head from 'next/head';\nimport MeetupDetails from '../../components/meetups/MeetupDetails';\nimport React from 'react';\n\nvar MeetupDetailsPage = function MeetupDetailsPage(props) {\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: /*#__PURE__*/_jsxDEV(MeetupDetails, {\n      image: props.meetupData.image,\n      title: props.meetupData.title,\n      address: props.meetupData.address,\n      description: props.meetupData.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 13\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 9\n  }, _this);\n}; //this must be used when pregenerating dynamic pages, when using getstaticProps()\n\n\n_c = MeetupDetailsPage;\nexport var __N_SSG = true;\nexport default MeetupDetailsPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"MeetupDetailsPage\");","map":{"version":3,"sources":["/Users/jacksonmurphey/Desktop/NEXTJS/nextjs-meetupApp/pages/[meetupId]/index.js"],"names":["Head","MeetupDetails","React","MeetupDetailsPage","props","meetupData","image","title","address","description"],"mappings":";;;;;AAAA;AACA;AAEA,OAAOA,IAAP,MAAiB,WAAjB;AAEA,OAAOC,aAAP,MAA0B,wCAA1B;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,KAAD,EAAW;AAGjC,sBACI,QAAC,KAAD,CAAO,QAAP;AAAA,2BACI,QAAC,aAAD;AACI,MAAA,KAAK,EAAEA,KAAK,CAACC,UAAN,CAAiBC,KAD5B;AAEI,MAAA,KAAK,EAAEF,KAAK,CAACC,UAAN,CAAiBE,KAF5B;AAGI,MAAA,OAAO,EAAEH,KAAK,CAACC,UAAN,CAAiBG,OAH9B;AAII,MAAA,WAAW,EAAEJ,KAAK,CAACC,UAAN,CAAiBI;AAJlC;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,WADJ;AAUH,CAbD,C,CAkBA;;;KAlBMN,iB;;AA4EN,eAAeA,iBAAf","sourcesContent":["//domain-name.com/[unique meetup id]\n//This will be our detail page. \n\nimport Head from 'next/head'\nimport { MongoClient, ObjectId } from 'mongodb'\nimport MeetupDetails from '../../components/meetups/MeetupDetails'\nimport React from 'react'\n\nconst MeetupDetailsPage = (props) => {\n\n\n    return (\n        <React.Fragment>\n            <MeetupDetails\n                image={props.meetupData.image}\n                title={props.meetupData.title}\n                address={props.meetupData.address}\n                description={props.meetupData.description}\n            />\n        </React.Fragment>\n    )\n}\n\n\n\n\n//this must be used when pregenerating dynamic pages, when using getstaticProps()\nexport const getStaticPaths = async () => {\n\n    const client = await MongoClient.connect('mongodb+srv://admin:rn_h_q8A_ELhx3c@cluster0.5vozs.mongodb.net/meetupsDB?retryWrites=true&w=majority')\n    const db = client.db()\n    const meetupsCollection = db.collection('meetups')\n    const meetups = await meetupsCollection.find({}, { _id: 1 }).toArray()\n    client.close()\n\n\n    return {\n        fallback: false, //false means our all our meetupId values are supported and addressed below. If this false, and you dont address all values, you will get a 404 page for unlisted ones.\n        paths: meetups.map(meetup => ({\n            params: { meetupId: meetup._id.toString() }\n        }))\n\n        //below is how we hard coded in our data.\n        // [\n        //     {\n        //         params: {\n        //             meetupId: 'm1',\n        //         },\n        //     },\n        //     {\n        //         params: {\n        //             meetupId: 'm2'\n        //         },\n        //     }\n        // ],\n    }\n}\n\n\nexport const getStaticProps = async (context) => {\n\n\n    const meetupId = context.params.meetupId //params.meetupId is from the folder name [meetupId]\n    //fetch data for single meetup here.\n    const client = await MongoClient.connect('mongodb+srv://admin:rn_h_q8A_ELhx3c@cluster0.5vozs.mongodb.net/meetupsDB?retryWrites=true&w=majority')\n    const db = client.db()\n    const meetupsCollection = db.collection('meetups')\n    const selectedMeetup = await meetupsCollection.findOne({ _id: ObjectId(meetupId) })\n    client.close()\n\n\n    return {\n        props: {\n            meetupData: {\n                id: selectedMeetup._id.toString(),\n                title: selectedMeetup.title,\n                address: selectedMeetup.address,\n                image: selectedMeetup.image,\n                description: selectedMeetup.description,\n            },\n        }\n    }\n}\n\nexport default MeetupDetailsPage"]},"metadata":{},"sourceType":"module"}